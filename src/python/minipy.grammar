; TODO
; Parsing Expression Grammar (ABNF)
; ABNF语法摘要（部分）
; （::=）是“被定义为”的意思
; 在双引号中的字("word")代表着这些字符本身。而double_quote用来代表双引号。
; 尖括号( < > )内包含的为必选项。
; 方括号( [ ] )内包含的为可选项。
; 大括号( { } )内包含的为可重复0至无数次的项。
; 竖线( | )表示在其左右两边任选一项，相当于"OR"的意思。
; 分好( ; )表示注释


grammar ::= { stmt }

stmt ::= import_statement
    | if_statement
    | while_statement
    | for_statement
    | continue_statement
    | break_statement
    | pass_statement
    
    | 'def' - name '(' - (parg)* (varg)* ')' - ':' - block
    | 'class' - name ':' block
    | 'return' - exp? ';'?
    
    | 'assert' - exp ';'?
    | 'raise'  - exp ';'?
    | 'global' - name ';'?
    | 'del' - exp ';'?
    
    | 'try' - ':' - block 'except' - (name 'as' name)? ':' block
    | assignment_statement
    | exp ';'?


import_statement ::= "import" module_name | "from" module_name "import"  ("*" | name_list)
module_name      ::= name { "." name }
name_list        ::= name { "," name }


if_statement    ::= "if"    exp ":" block {"elif" exp ":" block} ["else" block]
while_statement ::= "while" exp ":" block
for_statment    ::= "for"   name_list "in" exp ":" block

continue_statement ::= "continue" [ ";" ]
break_statement    ::= "break"    [ ";" ]
pass_statement     ::= "pass"     [ ";" ]

; a       = 1
; a, b    = 1, 2
; t.a, b  = 1, 2
; f().a   = 10
; c.m().a = 10
; c.m()[10 + 5] = 20
assignment_statement ::= var_list "=" exp
var_list      ::= var_statement { "," var_statement}
var_statement ::= name | exp ("." name | "[" exp "]")

; INDENT/DEDENT is tokenized
block ::= INDENT exp { exp } DEDENT | exp { ";" exp }

;----------------------------
;   operator priority
;----------------------------

Low  |  '=' | '+=' | '-=' | '*=' | '/=' | '%='
     |  ','
     |  'or'
     |  'and'
     |  'not'
     |  compare_operator  ; 比较运算符
     |  '+' | '-'
     |  '*' | '/' | '%'
     |  "-"                                                    ; negative operator （负号）
     |  "." name  | "(" arg_list ")" | "[" or_exp "]"          ; suffix
     |  "(" comma_exp ")"                                      ; prefix
High |  object

compare_operator ::= '>' | '>=' | '<' | '<=' | '==' | '!=' | 
    'in' | 'notin' | 'is' | 'isnot'
----------------------------


-     ::= SPACE { SPACE }                      ; 连续空白符
SPACE ::= "\t" | " "                           ; 单个空白符
name  ::= < [a-zA-Z_] [a-zA-Z_0-9]* > -        ; name
DOT   ::= "."

baseitem ::= number | string | name | 'None' | 'True' | 'False' | list | tuple | dict
list     ::= '[' { comma_exp } ']'
tuple    ::= '(' { comma_exp } ')'
dict     ::= '{' [dict_item] { ',' dict_item } [','] '}'
dict_item ::= exp ':' exp


