const char* mp2c_bin="69#mp2c/mp2c\n"
"63#8\n2#sys\n1#1\n"
"63#9\n2#os\n1#1\n"
"63#10\n2#mp_encode\n2#*\n1#2\n"
"63#11\n2#mp_opcode\n2#*\n1#2\n"
"63#13\n33\n28#OP_ADD\n2#obj_add\n34\n28#OP_SUB\n2#obj_sub\n34\n28#OP_MUL\n2#obj_mul\n34\n28#OP_DIV\n2#obj_div\n34\n28#OP_MOD\n2#obj_mod\n34\n28#OP_OR\n2#obj_or\n34\n28#OP_AND\n2#obj_and\n34\n28#OP_GET\n2#obj_get\n34\n28#OP_EQEQ\n2#obj_EQEQ\n34\n28#OP_NOTEQ\n2#obj_not_eq\n34\n28#OP_LT\n2#obj_LT\n34\n28#OP_LTEQ\n2#obj_LTEQ\n34\n28#OP_GT\n2#obj_GT\n34\n28#OP_GTEQ\n2#obj_GTEQ\n34\n26#OP_FUNC_MAP\n"
"63#34\n54#CodeWriter\n51#__init__\n"
"63#36\n57#768\n"
"63#37\n27#1\n27\n2#code\n21\n"
"63#38\n27#2\n27\n2#name\n21\n"
"63#39\n28#dict\n48\n27\n2#const_dict\n21\n"
"63#40\n31\n27\n2#line_buf\n21\n"
"63#41\n31\n27\n2#func_buf\n21\n"
"63#42\n33\n27\n2#label_dict\n21\n"
"63#43\n28#False\n27\n2#is_in_func\n21\n"
"63#44\n2#init_%s\n27\n2#name\n22\n8\n27\n2#py_entry_func\n21\n"
"63#46\n24\n27\n2#py_func_name\n21\n"
"63#48\n24\n27\n2#py_class_name\n21\n53\n28#CodeWriter\n2#__init__\n21\n51#indent\n"
"63#50\n57#256\n"
"63#51\n53\n28#CodeWriter\n2#indent\n21\n51#writeline\n"
"63#53\n57#512\n"
"63#54\n27\n2#is_in_func\n22\n37#15\n"
"63#55\n27\n2#func_buf\n22\n2#append\n22\n31\n2#str\n32\n27#1\n32\n48#1\n30\n35#14\n"
"63#57\n27\n2#line_buf\n22\n2#append\n22\n31\n2#str\n32\n27#1\n32\n48#1\n30\n53\n28#CodeWriter\n2#writeline\n21\n51#write_debug_opcode\n"
"63#59\n57#768\n"
"63#60\n28#opcodes\n27#1\n22\n25#3\n"
"63#61\n27\n2#writeline\n22\n2#  // %s %r\n31\n27#3\n32\n27#2\n32\n8\n48#1\n30\n24\n52\n"
"63#63\n27\n2#writeline\n22\n2#  puts(\"%s %r\");\n31\n27#3\n32\n27#2\n32\n8\n48#1\n30\n53\n28#CodeWriter\n2#write_debug_opcode\n21\n51#write_debug_lineno\n"
"63#65\n57#512\n24\n52\n"
"63#67\n27\n2#writeline\n22\n2#  tm->mp2c_lineno = %d;\n27#1\n8\n48#1\n30\n53\n28#CodeWriter\n2#write_debug_lineno\n21\n51#goto_label\n3#2.0\n25#2\n"
"63#69\n57#513\n"
"63#70\n3#1.0\n27\n2#label_dict\n22\n27#1\n21\n"
"63#71\n27\n2#writeline\n22\n2# \n27#2\n6\n2#goto L%s;\n27#1\n8\n4\n48#1\n30\n53\n28#CodeWriter\n2#goto_label\n21\n51#define_label\n"
"63#73\n57#512\n"
"63#74\n27\n2#is_in_func\n22\n37#7\n"
"63#75\n27\n2#func_buf\n22\n25#2\n35#6\n"
"63#77\n27\n2#line_buf\n22\n25#2\n"
"63#79\n27#2\n2#append\n22\n31\n2#label\n32\n27#1\n32\n48#1\n30\n53\n28#CodeWriter\n2#define_label\n21\n51#enter_func\n"
"63#81\n57#256\n"
"63#82\n28#True\n27\n2#is_in_func\n21\n53\n28#CodeWriter\n2#enter_func\n21\n51#exit_func\n"
"63#84\n57#256\n"
"63#85\n28#False\n27\n2#is_in_func\n21\n53\n28#CodeWriter\n2#exit_func\n21\n51#end\n"
"63#87\n57#256\n"
"63#88\n53\n28#CodeWriter\n2#end\n21\n51#emit_op_def\n"
"63#90\n57#512\n"
"63#91\n27\n2#py_class_name\n22\n24\n15\n37#9\n"
"63#92\n27\n2#emit_op_def_func\n22\n27#1\n48#1\n30\n35#8\n"
"63#94\n27\n2#emit_op_def_method\n22\n27#1\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_def\n21\n51#emit_op_def_method\n"
"63#96\n57#512\n"
"63#97\n2#%s:%s\n31\n27\n2#py_class_name\n22\n32\n27#1\n32\n8\n25#2\n"
"63#98\n2#method_%s_%s\n31\n27\n2#py_class_name\n22\n32\n27#1\n32\n8\n25#3\n"
"63#99\n27\n2#writeline\n22\n2#  func = mp2c_def_func(module, \"%s\", %s);\n31\n27#2\n32\n27#3\n32\n8\n48#1\n30\n"
"63#101\n27\n2#writeline\n22\n2#  MP2C_PUSH(func);\n48#1\n30\n"
"63#104\n27\n2#enter_func\n22\n48\n30\n"
"63#105\n27\n2#writeline\n22\n2#\n48#1\n30\n"
"63#106\n2#static MpObj {}() {{\n2#format\n22\n27#3\n48#1\n25#4\n"
"63#107\n27\n2#writeline\n22\n27#4\n48#1\n30\n"
"63#108\n27\n2#writeline\n22\n2#  MpObj locals[256];\n48#1\n30\n"
"63#109\n27\n2#writeline\n22\n2#  MpObj op_stack[256];\n48#1\n30\n"
"63#110\n27\n2#writeline\n22\n2#  MpObj *top = op_stack;\n48#1\n30\n"
"63#111\n27#2\n27\n2#py_func_name\n21\n53\n28#CodeWriter\n2#emit_op_def_method\n21\n51#emit_op_def_func\n"
"63#113\n57#512\n"
"63#114\n27#1\n25#2\n"
"63#115\n2#func_{}\n2#format\n22\n27#2\n48#1\n25#3\n"
"63#116\n27\n2#writeline\n22\n2#  func = mp2c_def_func(module, \"%s\", %s);\n31\n27#2\n32\n27#3\n32\n8\n48#1\n30\n"
"63#118\n27\n2#writeline\n22\n2#  MP2C_PUSH(func);\n48#1\n30\n"
"63#121\n27\n2#enter_func\n22\n48\n30\n"
"63#122\n27\n2#writeline\n22\n2#\n48#1\n30\n"
"63#123\n2#static MpObj {}() {{\n2#format\n22\n27#3\n48#1\n25#4\n"
"63#124\n27\n2#writeline\n22\n27#4\n48#1\n30\n"
"63#125\n27\n2#writeline\n22\n2#  MpObj locals[256];\n48#1\n30\n"
"63#126\n27\n2#writeline\n22\n2#  MpObj op_stack[256];\n48#1\n30\n"
"63#127\n27\n2#writeline\n22\n2#  MpObj *top = op_stack;\n48#1\n30\n"
"63#128\n27#2\n27\n2#py_func_name\n21\n53\n28#CodeWriter\n2#emit_op_def_func\n21\n51#emit_op_func_end\n"
"63#130\n57#256\n"
"63#131\n27\n2#writeline\n22\n2#  return NONE_OBJECT;\n48#1\n30\n"
"63#132\n27\n2#writeline\n22\n2#  /* EOF: end of function(%s) */\n27\n2#py_func_name\n22\n8\n48#1\n30\n"
"63#133\n27\n2#writeline\n22\n2#}\n48#1\n30\n"
"63#134\n27\n2#exit_func\n22\n48\n30\n53\n28#CodeWriter\n2#emit_op_func_end\n21\n51#emit_op_rot\n"
"63#136\n57#512\n"
"63#149\n27\n2#writeline\n22\n2#  { /** OP_ROT **/\n48#1\n30\n"
"63#150\n27\n2#writeline\n22\n2#    MpObj* left = top - %s + 1;\n27#1\n8\n48#1\n30\n"
"63#151\n27\n2#writeline\n22\n2#    MpObj* right = top;\n48#1\n30\n"
"63#152\n27\n2#writeline\n22\n2#    for (; left < right; left++, right--) {\n48#1\n30\n"
"63#153\n27\n2#writeline\n22\n2#      MpObj temp = *left; *left = *right; *right = temp;\n48#1\n30\n"
"63#154\n27\n2#writeline\n22\n2#    }\n48#1\n30\n"
"63#155\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_rot\n21\n51#emit_op_unpack\n"
"63#157\n57#512\n"
"63#169\n27\n2#writeline\n22\n2#  {/** OP_UNPACK **/\n48#1\n30\n"
"63#170\n27\n2#writeline\n22\n2#    MpObj x = MP2C_POP();\n48#1\n30\n"
"63#171\n27\n2#writeline\n22\n2#    mp_assert_type(x, TYPE_LIST, \"mp_eval: UNPACK\");\n48#1\n30\n"
"63#172\n27\n2#writeline\n22\n2#    int j;\n48#1\n30\n"
"63#173\n27\n2#writeline\n22\n2#    for(j = LIST_LEN(x)-1; j>=0; j--) {\n48#1\n30\n"
"63#174\n27\n2#writeline\n22\n2#      MP2C_PUSH(LIST_GET(x,j));\n48#1\n30\n"
"63#175\n27\n2#writeline\n22\n2#    }\n48#1\n30\n"
"63#176\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_unpack\n21\n51#emit_op_set\n"
"63#178\n57#256\n"
"63#190\n27\n2#writeline\n22\n2#  {\n48#1\n30\n"
"63#191\n27\n2#writeline\n22\n2#  MpObj* key = top;\n48#1\n30\n"
"63#192\n27\n2#writeline\n22\n2#  MpObj* obj = top-1;\n48#1\n30\n"
"63#193\n27\n2#writeline\n22\n2#  MpObj* value = top-2;\n48#1\n30\n"
"63#194\n27\n2#writeline\n22\n2#  top-=3;\n48#1\n30\n"
"63#195\n27\n2#writeline\n22\n2#  obj_set(*obj, *key, *value);\n48#1\n30\n"
"63#196\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_set\n21\n51#emit_op_append\n"
"63#198\n57#256\n"
"63#207\n27\n2#writeline\n22\n2#  {\n48#1\n30\n"
"63#208\n27\n2#writeline\n22\n2#  MpObj v = MP2C_POP();\n48#1\n30\n"
"63#209\n27\n2#writeline\n22\n2#  MpObj x = *top;\n48#1\n30\n"
"63#210\n27\n2#writeline\n22\n2#  mp_assert(IS_LIST(x), \"mp_eval: OP_APPEND require list\");\n48#1\n30\n"
"63#211\n27\n2#writeline\n22\n2#  list_append(GET_LIST(x), v);\n48#1\n30\n"
"63#212\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_append\n21\n51#emit_op_slice\n"
"63#214\n57#512\n"
"63#223\n27\n2#writeline\n22\n2#  {\n48#1\n30\n"
"63#224\n27\n2#writeline\n22\n2#  MpObj second = MP2C_POP();\n48#1\n30\n"
"63#225\n27\n2#writeline\n22\n2#  MpObj first  = MP2C_POP();\n48#1\n30\n"
"63#226\n27\n2#writeline\n22\n2#  *top = obj_slice(*top, first, second);\n48#1\n30\n"
"63#227\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_slice\n21\n51#emit_op_class\n"
"63#230\n57#512\n"
"63#239\n27\n2#writeline\n22\n2#  { /* OP_CLASS */\n48#1\n30\n"
"63#240\n27\n2#writeline\n22\n2#    MpObj class_name = %s;\n27\n2#get_const_var\n22\n27#1\n48#1\n8\n48#1\n30\n"
"63#241\n27\n2#writeline\n22\n2#    MpObj clazz = class_new(class_name);\n48#1\n30\n"
"63#242\n27\n2#writeline\n22\n2#    obj_set(globals, class_name, clazz);\n48#1\n30\n"
"63#243\n27\n2#writeline\n22\n2#  }\n48#1\n30\n"
"63#244\n27#1\n27\n2#py_class_name\n21\n53\n28#CodeWriter\n2#emit_op_class\n21\n51#emit_op_class_end\n"
"63#246\n57#256\n"
"63#247\n24\n27\n2#py_class_name\n21\n53\n28#CodeWriter\n2#emit_op_class_end\n21\n51#emit_op_import\n"
"63#249\n57#512\n"
"63#250\n27#1\n3#1.0\n15\n37#9\n"
"63#251\n27\n2#writeline\n22\n2#  obj_import(globals, MP2C_POP());\n48#1\n30\n35#15\n"
"63#253\n27\n2#writeline\n22\n2#  obj_import_attr(globals, *(top-1), *top);\n48#1\n30\n"
"63#254\n27\n2#writeline\n22\n2#  top -= 2;\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_import\n21\n51#emit_op_next\n"
"63#256\n57#768\n"
"63#257\n27\n2#writeline\n22\n2#  {\n48#1\n30\n"
"63#258\n27\n2#writeline\n22\n2#    MpObj *next = mp_next(*top);\n48#1\n30\n"
"63#259\n27\n2#writeline\n22\n2#    if (next != NULL) { MP2C_PUSH(*next); }\n48#1\n30\n"
"63#260\n27\n2#writeline\n22\n2#    else {\n48#1\n30\n"
"63#261\n27\n2#goto_label\n22\n27#1\n27#2\n4\n3#6.0\n48#2\n30\n"
"63#262\n27\n2#writeline\n22\n2#    }\n48#1\n30\n"
"63#263\n27\n2#writeline\n22\n2#  }\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_next\n21\n51#emit_op_setjump\n"
"63#265\n57#512\n"
"63#273\n27\n2#writeline\n22\n2#  /* OP_SETJUMP */\n48#1\n30\n"
"63#274\n27\n2#writeline\n22\n2#  printf(\"OP_SETJUMP\\\\n\");\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_setjump\n21\n51#emit_op_clr_jump\n"
"63#276\n57#512\n"
"63#277\n27\n2#writeline\n22\n2#  /* OP_CLR_JUMP */\n48#1\n30\n"
"63#278\n27\n2#writeline\n22\n2#  printf(\"OP_CLR_JUMP\\\\n\");\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_clr_jump\n21\n51#emit_op_load_ex\n"
"63#280\n57#256\n"
"63#281\n27\n2#writeline\n22\n2#  MP2C_PUSH(tm->ex);\n48#1\n30\n53\n28#CodeWriter\n2#emit_op_load_ex\n21\n51#gen_py_entry_start\n"
"63#283\n57#256\n"
"63#284\n31\n25#1\n"
"63#285\n27#1\n2#append\n22\n2#MpObj %s() {\n27\n2#py_entry_func\n22\n8\n48#1\n30\n"
"63#286\n27#1\n2#append\n22\n2#  MpObj fname = string_const(\"%s\");\n27\n2#name\n22\n8\n48#1\n30\n"
"63#288\n27#1\n2#append\n22\n2#  MpObj module_name = string_const(\"__main__\");\n48#1\n30\n"
"63#289\n27#1\n2#append\n22\n2#  module = module_new(fname, module_name, NONE_OBJECT);\n48#1\n30\n"
"63#290\n27#1\n2#append\n22\n2#  globals = GET_MODULE(module)->globals;\n48#1\n30\n"
"63#291\n27#1\n2#append\n22\n2#  MpObj op_stack[256];\n48#1\n30\n"
"63#292\n27#1\n2#append\n22\n2#  MpObj *top = op_stack;\n48#1\n30\n"
"63#293\n27#1\n2#append\n22\n2#  MpObj func = NONE_OBJECT;\n48#1\n30\n"
"63#294\n2#\\n\n2#join\n22\n27#1\n49#1\n52\n53\n28#CodeWriter\n2#gen_py_entry_start\n21\n51#gen_code_by_buf\n"
"63#296\n57#512\n"
"63#297\n31\n25#2\n27#1\n45\n44#35\n40#2\n25#3\n25#4\n"
"63#299\n27#3\n2#label\n15\n37#19\n"
"63#300\n27#4\n27\n2#label_dict\n22\n17\n37#11\n"
"63#301\n27#2\n2#append\n22\n2#L%s:\n27#4\n8\n48#1\n30\n35#1\n35#8\n"
"63#303\n27#2\n2#append\n22\n27#4\n48#1\n30\n36#34\n30\n"
"63#304\n2#\\n\n2#join\n22\n27#2\n49#1\n52\n53\n28#CodeWriter\n2#gen_code_by_buf\n21\n51#gen_const_def_section_code\n"
"63#306\n57#256\n"
"63#307\n31\n25#1\n27\n2#const_dict\n22\n45\n44#25\n25#2\n"
"63#309\n27\n2#const_dict\n22\n2#get\n22\n27#2\n48#1\n25#3\n"
"63#310\n27#1\n2#append\n22\n2#MpObj %s; /* %r */\n31\n27#3\n32\n27#2\n32\n8\n48#1\n30\n36#24\n30\n"
"63#311\n2#\\n\n2#join\n22\n27#1\n49#1\n52\n53\n28#CodeWriter\n2#gen_const_def_section_code\n21\n51#gen_const_init_code\n"
"63#313\n57#256\n"
"63#314\n31\n25#1\n27\n2#const_dict\n22\n45\n44#25\n25#2\n"
"63#316\n27\n2#const_dict\n22\n2#get\n22\n27#2\n48#1\n25#3\n"
"63#317\n27#1\n2#append\n22\n2#  %s = string_const(\"%s\");\n31\n27#3\n32\n27#2\n32\n8\n48#1\n30\n36#24\n30\n"
"63#318\n2#\\n\n2#join\n22\n27#1\n49#1\n52\n53\n28#CodeWriter\n2#gen_const_init_code\n21\n51#gen_global_section_code\n"
"63#320\n57#256\n"
"63#321\n27\n2#writeline\n22\n2#  return NONE_OBJECT;\n48#1\n30\n"
"63#322\n27\n2#writeline\n22\n2#}\n48#1\n30\n"
"63#324\n31\n25#1\n"
"63#325\n27#1\n2#append\n22\n27\n2#gen_py_entry_start\n22\n48\n48#1\n30\n"
"63#326\n27#1\n2#append\n22\n27\n2#gen_const_init_code\n22\n48\n48#1\n30\n"
"63#327\n27#1\n2#append\n22\n27\n2#gen_code_by_buf\n22\n27\n2#line_buf\n22\n48#1\n48#1\n30\n"
"63#328\n2#\\n\n2#join\n22\n27#1\n49#1\n52\n53\n28#CodeWriter\n2#gen_global_section_code\n21\n51#gen_main_entry\n"
"63#330\n57#256\n"
"63#331\n31\n25#1\n"
"63#332\n27#1\n2#append\n22\n2#\n48#1\n30\n"
"63#333\n27#1\n2#append\n22\n2#int main(int argc, char* argv[]) {\n48#1\n30\n"
"63#334\n27#1\n2#append\n22\n2#  mp2c_run_func(argc, argv, \"%s\", %s);\n31\n27\n2#name\n22\n32\n27\n2#py_entry_func\n22\n32\n8\n48#1\n30\n"
"63#336\n27#1\n2#append\n22\n2#  return 0;\n48#1\n30\n"
"63#337\n27#1\n2#append\n22\n2#}\n48#1\n30\n"
"63#338\n2#\\n\n2#join\n22\n27#1\n49#1\n52\n53\n28#CodeWriter\n2#gen_main_entry\n21\n51#get_code\n"
"63#340\n57#256\n"
"63#341\n27\n2#gen_const_def_section_code\n22\n48\n25#1\n"
"63#342\n27\n2#gen_global_section_code\n22\n48\n25#2\n"
"63#343\n27\n2#gen_code_by_buf\n22\n27\n2#func_buf\n22\n48#1\n25#3\n"
"63#344\n27\n2#gen_main_entry\n22\n48\n25#4\n"
"63#345\n31\n25#5\n"
"63#348\n27#5\n2#append\n22\n2##include <include/mp.h>\n48#1\n30\n"
"63#349\n27#5\n2#append\n22\n2##include <mp2c.h>\n48#1\n30\n"
"63#351\n27#5\n2#append\n22\n2#static MpObj module;\n48#1\n30\n"
"63#352\n27#5\n2#append\n22\n2#static MpObj globals;\n48#1\n30\n"
"63#353\n27#5\n2#append\n22\n27#1\n48#1\n30\n"
"63#354\n27#5\n2#append\n22\n27#3\n48#1\n30\n"
"63#355\n27#5\n2#append\n22\n27#2\n48#1\n30\n"
"63#356\n27#5\n2#append\n22\n27#4\n48#1\n30\n"
"63#357\n2#\\n\n2#join\n22\n27#5\n49#1\n52\n53\n28#CodeWriter\n2#get_code\n21\n51#get_const_var\n"
"63#359\n57#512\n"
"63#360\n27\n2#const_dict\n22\n2#get\n22\n27#1\n48#1\n25#2\n"
"63#361\n27#2\n24\n15\n37#18\n"
"63#362\n2#const_%s\n28#len\n27\n2#const_dict\n22\n48#1\n8\n25#2\n"
"63#363\n27#2\n27\n2#const_dict\n22\n27#1\n21\n35#1\n"
"63#364\n27#2\n52\n53\n28#CodeWriter\n2#get_const_var\n21\n56\n"
"63#366\n51#do_convert_op\n"
"63#366\n57#1024\n"
"63#370\n27\n2#writeline\n22\n2#  top--;\n48#1\n30\n"
"63#371\n27\n2#writeline\n22\n2#  *top = %s(*top, *(top+1));\n27#3\n8\n48#1\n30\n53\n26#do_convert_op\n"
"63#373\n51#convert\n"
"63#373\n57#512\n"
"63#374\n28#compile_to_list\n27\n2#test.py\n48#2\n25#2\n"
"63#375\n24\n25#3\n"
"63#376\n24\n25#4\n"
"63#377\n3\n25#5\n"
"63#378\n27\n2#split\n22\n2#\\n\n48#1\n25#6\n27#2\n45\n44#829\n40#2\n25#7\n25#8\n"
"63#385\n27#5\n3#1.0\n4\n25#5\n"
"63#386\n27#1\n2#define_label\n22\n27#5\n48#1\n30\n"
"63#387\n27#1\n2#write_debug_opcode\n22\n27#7\n27#8\n48#2\n30\n"
"63#390\n27#7\n28#OP_FILE\n15\n37#24\n"
"63#391\n27#1\n2#writeline\n22\n2#  MpObj module_file = string_new(\"%s\");\n27#8\n8\n48#1\n30\n"
"63#392\n27#8\n2#replace\n22\n2#.\n2#_\n48#2\n25#3\n"
"63#393\n27#3\n27#1\n2#module_name\n21\n35#777\n27#7\n28#OP_DEF\n15\n37#14\n"
"63#395\n27#1\n2#emit_op_def\n22\n27#8\n48#1\n30\n"
"63#396\n27#1\n2#py_func_name\n22\n25#4\n35#760\n27#7\n28#OP_LOAD_PARAMS\n15\n37#47\n"
"63#398\n28#int\n27#8\n3#256.0\n7\n48#1\n25#9\n"
"63#399\n27#8\n3#256.0\n8\n25#10\n"
"63#400\n2#  /* OP_LOAD_PARAMS(%s) */\n27#9\n8\n25#11\n"
"63#401\n27#1\n2#writeline\n22\n27#11\n48#1\n30\n28#range\n27#9\n48#1\n45\n44#16\n25#12\n"
"63#403\n27#1\n2#writeline\n22\n2#  locals[%d] = mp_take_obj_arg(\"%s\");\n31\n27#12\n32\n27#4\n32\n8\n48#1\n30\n36#15\n30\n35#710\n27#7\n28#OP_LOAD_PARG\n15\n37#23\n28#range\n27#8\n48#1\n45\n44#16\n25#12\n"
"63#406\n27#1\n2#writeline\n22\n2#  locals[%d] = mp_take_obj_arg(\"\");\n31\n27#12\n32\n27#4\n32\n8\n48#1\n30\n36#15\n30\n35#684\n27#7\n28#OP_LOAD_NARG\n15\n37#44\n"
"63#408\n27#8\n25#13\n"
"63#409\n27#1\n2#writeline\n22\n2#  MpObj args = list_new(mp_count_remain_args());\n48#1\n30\n"
"63#410\n27#1\n2#writeline\n22\n2#  while(mp_count_remain_args() > 0) {\n48#1\n30\n"
"63#411\n27#1\n2#writeline\n22\n2#    mp_append(args, mp_take_obj_arg(\"%s\"));\n27#4\n8\n48#1\n30\n"
"63#412\n27#1\n2#writeline\n22\n2#  }\n48#1\n30\n"
"63#413\n27#1\n2#writeline\n22\n2#  locals[%s] = args;\n27#13\n8\n48#1\n30\n35#637\n27#7\n28#OP_LOAD_LOCAL\n15\n37#16\n"
"63#415\n2#  MP2C_PUSH(locals[{}]);\n2#format\n22\n27#8\n48#1\n25#11\n"
"63#416\n27#1\n2#writeline\n22\n27#11\n48#1\n30\n35#618\n27#7\n28#OP_STORE_LOCAL\n15\n37#16\n"
"63#418\n2#  locals[{}] = MP2C_POP();\n2#format\n22\n27#8\n48#1\n25#11\n"
"63#419\n27#1\n2#writeline\n22\n27#11\n48#1\n30\n35#599\n27#7\n28#OP_NUMBER\n15\n37#16\n"
"63#421\n2#  MP2C_PUSH(number_obj({}));\n2#format\n22\n27#8\n48#1\n25#11\n"
"63#422\n27#1\n2#writeline\n22\n27#11\n48#1\n30\n35#580\n27#7\n28#OP_STRING\n15\n37#23\n"
"63#424\n27#1\n2#get_const_var\n22\n27#8\n48#1\n25#14\n"
"63#425\n2#  MP2C_PUSH({});\n2#format\n22\n27#14\n48#1\n25#11\n"
"63#426\n27#1\n2#writeline\n22\n27#11\n48#1\n30\n35#554\n27#7\n28#OP_NONE\n15\n37#9\n"
"63#428\n27#1\n2#writeline\n22\n2#  MP2C_PUSH(NONE_OBJECT);\n48#1\n30\n35#542\n27#7\n28#OP_LIST\n15\n37#9\n"
"63#430\n27#1\n2#writeline\n22\n2#  MP2C_PUSH(list_new(2));\n48#1\n30\n35#530\n27#7\n28#OP_DICT\n15\n37#9\n"
"63#432\n27#1\n2#writeline\n22\n2#  MP2C_PUSH(dict_new());\n48#1\n30\n35#518\n27#7\n28#OP_APPEND\n15\n37#8\n"
"63#434\n27#1\n2#emit_op_append\n22\n48\n30\n35#507\n27#7\n28#OP_SLICE\n15\n37#9\n"
"63#436\n27#1\n2#emit_op_slice\n22\n27#8\n48#1\n30\n35#495\n27#7\n28#OP_CALL\n15\n39#5\n27#7\n28#OP_TAILCALL\n15\n20\n37#23\n"
"63#438\n27#8\n25#15\n"
"63#439\n27#1\n2#writeline\n22\n2#  top -= %s; /* args */\n27#15\n8\n48#1\n30\n"
"63#440\n27#1\n2#writeline\n22\n2#  *top = mp_call_with_nargs(*top, %s, top + 1);\n27#15\n8\n48#1\n30\n35#464\n27#7\n28#OP_APPLY\n15\n37#16\n"
"63#442\n27#1\n2#writeline\n22\n2#  top--;\n48#1\n30\n"
"63#443\n27#1\n2#writeline\n22\n2#  *top = mp_call_with_args(*top, *(top+1));\n48#1\n30\n35#445\n27#7\n28#OP_POP\n15\n37#9\n"
"63#445\n27#1\n2#writeline\n22\n2#  MP2C_POP();\n48#1\n30\n35#433\n27#7\n28#OP_JUMP\n15\n37#11\n"
"63#447\n27#1\n2#goto_label\n22\n27#5\n27#8\n4\n48#1\n30\n35#419\n27#7\n28#OP_LINE\n15\n37#49\n"
"63#449\n27#8\n3#1.0\n5\n25#16\n"
"63#450\n27#16\n28#len\n27#6\n48#1\n12\n37#13\n"
"63#451\n27#6\n27#16\n22\n25#11\n"
"63#452\n27#11\n2#rstrip\n22\n48\n25#11\n35#4\n"
"63#454\n2#Unknown\n25#11\n"
"63#455\n27#1\n2#write_debug_lineno\n22\n27#8\n48#1\n30\n"
"63#456\n27#1\n2#writeline\n22\n2#  /* (line:%03d) %r */\n31\n27#8\n32\n27#11\n32\n8\n48#1\n30\n35#367\n27#7\n28#OP_POP_JUMP_ON_FALSE\n15\n37#26\n"
"63#460\n27#1\n2#writeline\n22\n2#  if(!mp_is_true(MP2C_POP())) {\n48#1\n30\n"
"63#461\n27#1\n2#goto_label\n22\n27#5\n27#8\n4\n3#4.0\n48#2\n30\n"
"63#462\n27#1\n2#writeline\n22\n2#  }\n48#1\n30\n35#338\n27#7\n28#OP_JUMP_ON_TRUE\n15\n37#26\n"
"63#464\n27#1\n2#writeline\n22\n2#  if (mp_is_true(MP2C_TOP())) {\n48#1\n30\n"
"63#465\n27#1\n2#goto_label\n22\n27#5\n27#8\n4\n3#4.0\n48#2\n30\n"
"63#466\n27#1\n2#writeline\n22\n2#  }\n48#1\n30\n35#309\n27#7\n28#OP_JUMP_ON_FALSE\n15\n37#26\n"
"63#468\n27#1\n2#writeline\n22\n2#  if (!mp_is_true(MP2C_TOP())) {\n48#1\n30\n"
"63#469\n27#1\n2#goto_label\n22\n27#5\n27#8\n4\n3#4.0\n48#2\n30\n"
"63#470\n27#1\n2#writeline\n22\n2#  }\n48#1\n30\n35#280\n27#7\n28#OP_RETURN\n15\n37#9\n"
"63#472\n27#1\n2#writeline\n22\n2#  return MP2C_POP();\n48#1\n30\n35#268\n27#7\n28#OP_FUNC_MAP\n17\n37#17\n"
"63#474\n28#OP_FUNC_MAP\n2#get\n22\n27#7\n48#1\n25#4\n"
"63#475\n28#do_convert_op\n27#1\n27#7\n27#8\n27#4\n48#4\n30\n35#248\n27#7\n28#OP_SET\n15\n37#8\n"
"63#477\n27#1\n2#emit_op_set\n22\n48\n30\n35#237\n27#7\n28#OP_NOT\n15\n37#9\n"
"63#479\n27#1\n2#writeline\n22\n2#*top = number_obj(!mp_is_true(*top));\n48#1\n30\n35#225\n27#7\n28#OP_DEF_END\n15\n37#8\n"
"63#481\n27#1\n2#emit_op_func_end\n22\n48\n30\n35#214\n27#7\n28#OP_STORE_GLOBAL\n15\n37#22\n"
"63#483\n27#1\n2#get_const_var\n22\n27#8\n48#1\n25#17\n"
"63#484\n27#1\n2#writeline\n22\n2#  obj_set(globals, %s/*%s*/, MP2C_POP());\n31\n27#17\n32\n27#8\n32\n8\n48#1\n30\n35#189\n27#7\n28#OP_LOAD_GLOBAL\n15\n37#21\n"
"63#486\n27#1\n2#get_const_var\n22\n27#8\n48#1\n25#17\n"
"63#487\n27#1\n2#writeline\n22\n2#  MP2C_PUSH(mp2c_load_global(globals, {}/*{}*/));\n2#format\n22\n27#17\n27#8\n48#2\n48#1\n30\n35#165\n27#7\n28#OP_EOP\n15\n37#9\n"
"63#490\n27#1\n2#writeline\n22\n2#  /* EOP */\n48#1\n30\n35#153\n27#7\n28#OP_IMPORT\n15\n37#9\n"
"63#492\n27#1\n2#emit_op_import\n22\n27#8\n48#1\n30\n35#141\n27#7\n28#OP_ITER\n15\n37#9\n"
"63#494\n27#1\n2#writeline\n22\n2#  *top = iter_new(*top);\n48#1\n30\n35#129\n27#7\n28#OP_NEXT\n15\n37#10\n"
"63#496\n27#1\n2#emit_op_next\n22\n27#5\n27#8\n48#2\n30\n35#116\n27#7\n28#OP_UP_JUMP\n15\n37#12\n"
"63#498\n27#1\n2#goto_label\n22\n27#5\n27#8\n5\n3#4.0\n48#2\n30\n35#101\n27#7\n28#OP_ROT\n15\n37#9\n"
"63#500\n27#1\n2#emit_op_rot\n22\n27#8\n48#1\n30\n35#89\n27#7\n28#OP_CLASS\n15\n37#9\n"
"63#502\n27#1\n2#emit_op_class\n22\n27#8\n48#1\n30\n35#77\n27#7\n28#OP_CLASS_END\n15\n37#8\n"
"63#504\n27#1\n2#emit_op_class_end\n22\n48\n30\n35#66\n27#7\n28#OP_UNPACK\n15\n37#9\n"
"63#506\n27#1\n2#emit_op_unpack\n22\n27#8\n48#1\n30\n35#54\n27#7\n28#OP_SETJUMP\n15\n37#9\n"
"63#508\n27#1\n2#emit_op_setjump\n22\n27#8\n48#1\n30\n35#42\n27#7\n28#OP_CLR_JUMP\n15\n37#9\n"
"63#510\n27#1\n2#emit_op_clr_jump\n22\n27#8\n48#1\n30\n35#30\n27#7\n28#OP_LOAD_EX\n15\n37#8\n"
"63#512\n27#1\n2#emit_op_load_ex\n22\n48\n30\n35#19\n"
"63#514\n28#opcodes\n27#7\n22\n25#18\n"
"63#515\n2#Unknown opcode, key={}, val={}\n2#format\n22\n27#18\n27#8\n48#2\n25#19\n"
"63#516\n28#raise\n27#19\n48#1\n30\n36#828\n30\n"
"63#518\n27#1\n2#end\n22\n48\n30\n53\n26#convert\n"
"63#520\n51#do_benchmark\n"
"63#520\n57#512\n"
"63#521\n28#print\n2#\n48#1\n30\n"
"63#522\n28#print\n2#Test File: %s\n27\n8\n48#1\n30\n"
"63#523\n28#print\n2#-\n3#50.0\n6\n48#1\n30\n"
"63#524\n28#print\n2#>>> Run with minipy\n48#1\n30\n"
"63#525\n28#os\n2#system\n22\n2#./minipy %r\n27\n8\n48#1\n30\n"
"63#527\n28#print\n2#\n48#1\n30\n"
"63#528\n28#print\n2#-\n3#50.0\n6\n48#1\n30\n"
"63#529\n28#print\n2#>>> Run with %s\n27#1\n8\n48#1\n30\n"
"63#530\n28#os\n2#system\n22\n2#./%s\n27#1\n8\n48#1\n30\n"
"63#532\n28#print\n2#\n48#1\n30\n"
"63#533\n28#print\n2#-\n3#50.0\n6\n48#1\n30\n"
"63#534\n28#print\n2#>>> Run with python3\n48#1\n30\n"
"63#535\n28#os\n2#system\n22\n2#python3 %r\n27\n8\n48#1\n30\n53\n26#do_benchmark\n"
"63#538\n54#AotCompiler\n51#__init__\n28#False\n25#1\n"
"63#540\n57#257\n"
"63#541\n27#1\n27\n2#_debug\n21\n53\n28#AotCompiler\n2#__init__\n21\n51#do_build\n"
"63#543\n57#768\n"
"63#544\n28#print\n2#building %s ...\n27#1\n8\n48#1\n30\n"
"63#545\n28#print\n2#target: %s\n27#2\n8\n48#1\n30\n"
"63#547\n2#gcc -O2 %r -o %r -lm -Isrc -Imp2c\n31\n27#1\n32\n27#2\n32\n8\n25#3\n"
"63#548\n28#print\n2#build command:\n27#3\n48#2\n30\n"
"63#549\n28#os\n2#system\n22\n27#3\n48#1\n25#4\n"
"63#550\n27#4\n3\n15\n37#7\n"
"63#551\n28#print\n2#build success!\n48#1\n30\n35#13\n"
"63#553\n28#print\n2#build failed\n48#1\n30\n"
"63#554\n28#sys\n2#exit\n22\n3#1.0\n48#1\n30\n53\n28#AotCompiler\n2#do_build\n21\n51#get_base_name\n"
"63#557\n57#512\n"
"63#558\n27#1\n2#split\n22\n2#/\n48#1\n3#-1.0\n22\n25#2\n"
"63#559\n27#2\n2#split\n22\n2#.\n48#1\n3\n22\n25#3\n"
"63#560\n27#3\n52\n53\n28#AotCompiler\n2#get_base_name\n21\n51#get_default_target\n"
"63#562\n57#512\n"
"63#563\n27\n2#get_base_name\n22\n27#1\n48#1\n25#2\n"
"63#564\n2#build/%s.out\n27#2\n8\n52\n53\n28#AotCompiler\n2#get_default_target\n21\n51#compile\n24\n25#2\n"
"63#566\n57#513\n"
"63#567\n28#load\n27#1\n48#1\n25#3\n"
"63#568\n27\n2#get_base_name\n22\n27#1\n48#1\n25#4\n"
"63#569\n28#CodeWriter\n27#3\n27#4\n48#2\n25#5\n"
"63#570\n28#convert\n27#3\n27#5\n48#2\n30\n"
"63#571\n27#5\n2#get_code\n22\n48\n25#6\n"
"63#574\n27#2\n24\n15\n37#9\n"
"63#575\n27\n2#get_default_target\n22\n27#1\n48#1\n25#2\n35#1\n"
"63#577\n2#build/%s.c\n27#4\n8\n25#7\n"
"63#579\n28#save\n27#7\n27#6\n48#2\n30\n"
"63#581\n27\n2#_debug\n22\n37#9\n"
"63#582\n28#print\n2#saved to %s\n27#7\n8\n48#1\n30\n35#1\n"
"63#584\n27\n2#do_build\n22\n27#7\n27#2\n48#2\n30\n53\n28#AotCompiler\n2#compile\n21\n56\n"
"63#587\n51#main\n"
"63#587\n57\n"
"63#588\n28#sys\n2#argv\n22\n25\n"
"63#591\n28#len\n27\n48#1\n3#2.0\n15\n37#7\n"
"63#592\n27\n3#1.0\n22\n25#1\n35#18\n28#len\n27\n48#1\n3#1.0\n15\n37#5\n"
"63#594\n2#test/mp2c/fib.py\n25#1\n35#8\n"
"63#596\n28#raise\n28#Exception\n2#参数异常\n48#1\n48#1\n30\n"
"63#598\n28#AotCompiler\n28#True\n48#1\n25#2\n"
"63#599\n27#2\n2#compile\n22\n27#1\n48#1\n30\n"
"63#601\n28#do_benchmark\n27#1\n28#target\n48#2\n30\n53\n26#main\n"
"63#604\n28#__name__\n2#__main__\n15\n37#6\n"
"63#605\n28#main\n48\n30\n35#1\n61\n";
